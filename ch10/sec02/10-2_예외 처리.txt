프로그램에서 예외가 발생했을 경우 프로그램의 갑작스러운 종료를 막고, 정상 실행을 유지할 수 있도록 예외처리를 해야 한다.
이번 절에서는 예외 처리를 하는 방법에 대해 알아보자.

자바 컴파일러는 소스파일을 컴파일할 때 일반 예외가 발생할 가능성이 있는 코드를 발견하면 컴파일 에러를 발생시켜 개발자가 강제적으로 예외 처리 코드를 작성하도록 요구한다.
그러나 실행 예외는 컴파일러가 체크해주지 않기 때문에 개발자의 경험을 바탕으로 예외 처리 코드를 작성해야 한다.

<예외 처리 코드>
try-catch-finally 블록은 생성자 내부와 메소드 내부에서 작성되어 일반 예외와 실행 에외가 발생할 경우 예외 처리를 할 수 있도록 해준다.
try-catch=finally 블록은 다음과 같이 작성한다.

1. try 블록에는 예외 발생 코드가 위치한다.
2. try 블록의 코드가 예외 발생 없이 정상 실행되면 catch 블록의 코드는 실행되지 않고 finally 블록의 코드를 실행한다.
   만약 try 블록의 코드에서 예외가 발생하면 즉시 실행을 멈추고 catch 블록으로 이동하여 예외 처리 코드를 실행한다.
   그리고 finally 블록의 코드를 실행한다.
3. finally 블록은 생략 가능하다.
   예외 발생 여부와 상관없이 항상 실행할 내용이 있을 경우에만 finally 블록을 작성해주면 된다.
   심지어 try 블록과 catch 블록에서 return 문울 사용하더라도 finally 블록은 항상 실행된다.

이클립스는 일반 예외가 발생할 가능성이 있는 코드를 작성하면 빨간 밑줄을 그어 예외 처리 코드의 필요성을 알려준다.
빨간 밑줄에 마우스 포인터를 가져다 놓으면 Unhandled exception(처리되지 않은 예외) 정보를 알 수 있다.

Class.forName() 메소드는 매개값으로 주어진 클래스가 존재하면 Class 객체를 리턴하지만, 존재하지 않으면 ClassNotFoundException을 발생시킨다.
ClassNotFoundException은 일반 예외이므로 컴파일러는 개발자에게 다음과 같이 예외 처리 코드를 작성하도록 요구한다.
( TryCatchFinallyExample.java / package ch10.sec02.exam01; )

위 예제를 실행하면 6라인에서 ClassNotFoundException이 발생하는데, 이것은 java.lang.String2 클래스가 존재하지 않기 때문이다.
6라인에서 예외가 발생되면 7라인을 실행해서 예외처리를 한다.

ArrayIndexOutOfBoundsException이나 NumberFormatException과 같은 실행 예외는 컴파일러가 예외 처리 코드를 체크하지 않기 때문에 이클립스에서도 빨간 밑줄이 생기지 않는다.
오로지 개발자의 경험에 의해 예외 처리를 다음과 같이 작성해주어야 한다.
( TryCatchFinallyRuntimeExceptionExample.java / package ch10.sec02.exam02; )

이클립스에서 예제를 실행시키면 8라인에서 ArrayIndexOutOfBoundsException이 발생하는데, 이는 실행 매개값을 주지 않았기 때문이다.
8라인에서 예외가 발생되면 10~12라인을 실행해서 예외처리한다.

이클립스에서 [Run] - [Run Configuration] 메뉴를 선택한 후 2개의 실행 매개값을 주되 첫 번째 실행 매개값에 숫자가 아닌 문자를 주고 실행해보자.
이 경우 16라인에서 NumberFormatException이 발생한다.
그리고 21라인을 실행해서 예외 처리를 한 후 마지막으로 23라인을 실행하게 된다.
______________________________________________________________________________________________________________________________________________________________________________________

<예외 종류에 따른 처리 코드>
예외의 종류에 따라 예외 처리 코드를 다르게 작성하는 방법을 알아보자.

 * 다중 catch
 try 블록 내부는 다양한 예외가 발생할 수 있다.
 이 경우 발생되는 예외별로 예외 처리 코드를 다르게 하려면 어떻게 해야 할까?
 이것에 대한 해답은 다중 catch 블록을 작성하는 것이다.
 catch 블록의 예외 클래스 타입은 try 블록에서 발생된 에외의 종류를 말하는데, try 블록에서 해당 타입의 예외가 발생하면 catch 블록을 실행하도록 되어 있다.
 try{
   ArrayIndexOutOfBoundsException 발생

   NumberFormatException 발생
 } catch(ArrayIndexOutOfBoundsException){
   예외 처리1
 } catch(NumberFormatException){
   예외 처리2
 }

 catch 블록이 여러 개라 할지라도 단 하나의 catch 블록만 실행된다.
 그 이유는 try 블록에서 동시 다발적으로 예외가 발생하지 않고, 하나의 예외가 발생하면 즉시 실행을 멈추고 해당 catch 블록으로 이동하기 때문이다.
( CatchByExceptionKindExample.java / package ch10.sec02.exam03; )

6~7라인에서 ArrayIndexOutOfBoundsException이 발생한다면 13라인이 실행되고, 8~9라인에서 NumberFormatException이 발생한다면 15라인이 실행된다.
17라인은 예외 발생 여부와 상관없이 실행된다.

 * catch 순서
 다중 catch 블록을 작성할 때 주의할 점은 상위 예외 클래스가 하위 예외 클래스보다 아래쪽에 위치해야 한다는 것이다.
try 블록에서 예외가 발생했을 때, 예외를 처리해줄 catch 블록은 위에서부터 차례대로 검색된다.
만약 상위 예외 클래스의 catch 블록이 위에 있다면, 하위 예외 클래스의 catch 블록은 실행되지 않는다.
왜냐하면 하위 예외는 상위 예외를 상속했기 때문에 상위 예외 타입도 되기 때문이다.

따라서 다음은 잘못 코딩한 것이다.
 * 잘못된 코딩 예
  try{
    ArrayIndexOutOfBoundException 발생 // -> catch(Exception e)

    NumberFormatException 발생 // -> catch(Exception e)
  } catch(Exception e){
     예외 처리1
  } catch(ArrayIndexOutOfBoundException e){
     예외 처리2
  }

ArrayIndexOutOfBoundException과 NumberFormatException은 모두 Exception을 상속받기 때문에 첫 번째 catch 블록만 선택되어 실행된다.
두 번째 catch 블록은 어떤 경우에라도 실행되지 않는다.
위 코드는 다음과 같이 수정해야 한다.
 * 올바른 코딩 예
 try{
   ArrayIndexOutOfBoundException 발생

   다른 Exception 발생
 } catch(ArrayIndexOutOfBoundException e){
   예외 처리1
 } catch(Exception e){
   예외 처리2
 }
try 블록에서 ArrayIndexOutOfBoundException이 발생하면 첫 번째 catch 블록을 실행하고, 그 밖의 다른 예외가 발생하면 두 번째 catch 블록을 실행한다.
( CatchOrderExample.java / package sec02.exam04; )
______________________________________________________________________________________________________________________________________________________________________________________

<예외 떠넘기기>
메소드 내부에서 예외가 발생할 수 있는 코드를 작성할 때 try-catch 블록으로 예외를 처리하는 것이 기본이지만, 경우에 따라서는 메소드를 호출한 곳으로 예외를 떠넘길 수도 있다.
이때 사용하는 키워드가 throws이다.
throws 키워드는 메소드 선언부 끝에 작성되어 메소드에서 처리하지 않은 예외를 호출한 곳으로 떠넘기는 역할을 한다.
trhows 키워드 뒤에는 떠넘길 예외 클래스를 쉼표로 구분해서 나열해주면 된다.
 리턴타입 메소드이름(매개변수, ...) throws 예외클래스1, 예외클래스2, ...{
 }

발생할 수 있는 예외의 종류별로 throws 뒤에 나열하는 것이 일반적이지만, 다음과 같이 trhows Exception만으로 모든 예외를 간단히 떠넘길 수도 있다.
 리턴타입 메소드이름(매개변수, ...) throws Exception{
 }
throws 키워드가 붙어 있는 메소드는 반드시 try 블록 내에서 호출되어야 한다.
그리고 catch 블록에서 떠넘겨 받은 예외를 처리해야 한다.
다음 코드는 throws 키워드가 있는 method2()를 method1()에서 호출하는 방법을 보여준다.

public void method1(){
  try{
    method2();
  } catch(ClassNotFoundException e){
    //예외 처리 코드
    System.out.println("클래스가 존재하지 않습니다.");
  }
}

public void method2() throws ClassNotFoundException { // -> catch(ClassNotFoundException e)
   Class clazz = Class.forName("java.lang.String2");
}

method1()에서도 try-catch 블록으로 예외를 처리하지 않고 다음과 같이 throws 키워드로 다시 예외를 떠넘길 수 있다.
그러면 method1()을 호출하는 곳에서 try-catch 블록을 사용해서 예외를 처리해야 한다.

public void method1() throws ClassNotFoundException{
   method2();
}
자바 API 도큐먼트를 보면 클래스 생성자와 메소드 선언부에 throws 키워드가 붙어 있는 것을 흔히 볼 수 있다.
이러한 생성자와 메소드를 사용하고 싶다면, 반드시 try-catch 블록으로 예외 처리를 해야 한다.
아니면 throws를 다시 사용해서 예외를 호출한 곳으로 떠넘거야 한다.
그렇지 않으면 컴파일 에러가 발생한다.
예를 들어 Class의 forName() 메소드를 자바 API 도큐먼트에서 보면 다음과 같다.

forName
public static Class<?> forName(String className) throws ClassNowFoundException

forName() 메소드 선언부 뒤에 throws ClassNotFoundException이 붙어 있기 때문에 forName() 메소드를 호출할 때 try-catch 블록으로 예외를 처리하거나, throws로 예외를 떠넘겨야 한다.
다음 예제에서 Class.forName() 메소드를 사용하는 findClass() 메소드는 예외를 떠넘겼고, findClass()를 호출하는 main() 메소드에서 try-catch 블록을 사용해서 예외 처리를 했다.
( ThorwsExample.java / package sec02.exam05; )

main() 메소드에서도 throws 키워드를 사용해서 예외를 떠넘길 수 있는데, 결국 JVM이 최종적으로 예외 처리를 하게 된다.
JVM은 예외의 내용을 콘솔(Console)에 출력하는 것으로 예외 처리를 한다.

public static void main(String[] args) throws ClassNotFoundException {
  findClass();
}
 * note main() 메소드에서 throws Exception을 붙이는 것은 좋지 못한 예외 처리 방법이다.
프로그램 사용자는 프로그램이 알 수 없는 예외 내용을 출력하고 종료되는 것을 좋아하지 않는다.
따라서 main()에서 try-catch 블록으로 예외를 최종 처리하는 것이 바람직하다.
______________________________________________________________________________________________________________________________________________________________________________________

확인문제
1. try-catch-finally 블록에 대한 설명 중 틀린 것은 무엇인가?
 1-1. try {} 블록에는 예외가 발생할 수 있는 코드를 작성한다.
 1-2. catch {} 블록은 try {} 블록에서 발생한 예외를 처리하는 블록이다.
 1-3. try {} 블록에서 return문을 사용하면 finally {} 블록은 실행되지 않는다.
 1-4. catch {} 블록은 예외의 종류별로 여러 개를 작성할 수 있다.
 답 : 1-3.
 return문을 사용하더라도 finally {} 블록은 실행된다.

2. throws에 대한 설명으로 틀린 것은 무엇인가?
 2-1. 생성자나 메소드의 선언 끝 부분에 사용되어 내부에서 발생된 예외를 떠넘긴다.
 2-2. throws 뒤에는 떠넘겨야 할 예외를 쉼표(,)로 구분해서 기술한다
 2-3. 모든 에외를 떠넘기기 위해 간단하게 throws Exception으로 작성할 수 있다.
 2-4. 새로운 예외를 발생시키기 위해 사용된다.
 답 : 2-4.
 메소드를 호출한 곳으로 예외를 떠넘기기 위해 사용된다.

3. 다음과 같은 메소드가 있을 때 예외를 잘못 처리한 것은 무엇인가?
public void method2() throws NumberFormatException, ClassNotFoundException {...}
 3-1.
 try{
   method1();
 } catch(Exception e){
 }
 3-2.
 void method2() throws Exception{
   method1();
 }
 3-3.
 try{
   method1();
 } catch(Exceptionn e){
 } catch(ClassNotFoundException e){
 }
 3-4.
 try{
   method1();
 } catch(ClassNotFoundException e){
 } catch(NumberFormatException e){
 }

4. 다음 코드가 실행되었을 때 출력 결과는 무엇인가?
10
숫자로 변환할 수 없음
10
인덱스를 초과했음
10