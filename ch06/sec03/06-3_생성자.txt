생성자(Constructor)는 new 연산자로 클래스로부터 객체를 생성할 때 호출되어 객체의 초기화를 담당한다.

객체 초기화란 필드를 초기화하거나 메소드를 호출해서 객체를 사용할 준비를 하는 것.
생성자를 실행하지 않고는 클래스로부터 객체를 만들 수 없다.
new 연산자에 의해 생성자가 성공적으로 실행되면 힙(heap)영역에 객체가 생성되고 객체의 번지가 리턴된다.
리턴된 객체의 번지는 클래스 변수에 저장된다.
________________________________________________________________________________________________________________________________________________

모든 클래스는 생성자가 반드시 존재하며, 생성자를 하나 이상 가질 수 있다.
우리가 클래스 내부에 생성자 선언을 생략했다면 컴파일러는 다음과 같이 중괄호 {} 블록 내용이 비어 있는 기본 생성자(Default Constructor)를 바이트 코드에 자동 추가한다.

[public] 클래스(){}

클래스가 public class로 선언되면 기본 생성자에도 public이 붙지만, 클래스가 public 없이 class로만 선언되면 기본 생성자에도 public이 붙지 않는다.
예를 들어 Car클래스를 설계할 때 생성자를 생략하면 기본 생성자가 다음가 같이 생성된다
<소스파일Car.java>
public class Car{}
<바이트 코드 파일Car.class>
public class Car{
    public Car(){}  // 자동 추가
}

그렇기 때문에 클래스에 생성자를 선언하지 않아도 다음과 같이 new 연산자 뒤에 기본 생성자를 호출해서 객체를 생성할 수 있다.
________________________________________________________________________________________________________________________________________________

기본 생성자 대신 우리가 생성자를 명시적으로 선언하려면 다음과 같은 형태로 작성하면 된다.
클래스( 매개변수선언, ... _ ){
    객체의 초기화 코드
}

생성자는 메소드와 비슷한 모양을 가지고 있으나, 리턴 타입이 없고 클래스 이름과 동일하다.
생성자 블록 내부에는 객체 초기화 코드가 작성되는데, 일반적으로 필드에 초기값을 저장하거나 메소드를 호출하여 객체 사용 전에 필요한 준비를 한다.
매개 변수 선언은 생략할 수 있고, 여러개를 선언해도 좋다.
매개 변수는 new 연산자로 생성자를 호출할 때 외부의 값을 생성자 블록 내부로 전달하는 역할을 한다.
