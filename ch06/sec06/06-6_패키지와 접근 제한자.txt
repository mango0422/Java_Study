패키지의 물리적인 형태는 파일 시스템의 폴더이다.
패키지는 단순히 파일 시스템의 폴더 기능만 하는 것이 아니라 클래스의 일부분으로, 클래스를 유일하게 만들어주는 식별자 역할을 한다.
클래스 이름이 동일하더라도 패키지가 다르면 다른 클래스로 인식한다.
클래스릐 전체 이름은 '패키지 이름 + 클래스 이름'인데 패키지가 상·하위로 구분되어 있다면 도트(.)를 사용해서 다음과 같이 표현한다.
상위패키지.하위패키지.클래스

예를 들어 다음과 같이 패키지가 구성되어 있다고 가정해보자.
A 클래스의 전체 이름은 com.mycompany.A이고 B 클래스의 전체 이름은 com.yourcompany.B이다.

<패키지 선언>
클래스를 작성할 때 해당 클래스가 어떤 패키지에 속할 것인지를 선언하는 것을 패키지 선언이라고 한다.
다음은 클래스를 작성할 때 패키지를 선언하는 방법을 보여준다.
package 상위패키지.하위패키지;
public class ClassName{...}

예를 들어 Car 클래스가 com.mycompany 패키지에 속해야 한다면 다음과 같이 Car 클래스를 작성해야 한다.
package com.mycompany;
public class Car{...};

패키지는 클래스의 일부이다. 클래스만 따로 복사해서 다른 곳으로 이동하면 클래스를 사용할 수 없기 때문이다.
예를 들어 Car 클래스가 com.mycompany 패키지에 소속되어 있기 때문에 com/yourcompany 폴더에 Car.class를 저장하면 Car 클래스를 사용할 수 없다.
만약 클래스를 이동해야 한다면 패키지 전체를 이동시켜야 한다.

패키지 이름은 개발자가 임의대로 지어주면 되지만, 여기에도 지켜야 할 몇 가지 규칙이 있다.
* 숫자로 시작해서는 안되고 _ $를 제외한 특수 문자를 사용해서는 안된다.
* java로 시작하는 패키지는 자바 표준 API에서만 사용하므로 사용해서는 안된다.
* 모두 소문자로 작성하는 것이 관례이다.
______________________________________________________________________________________________________________________________________________________________________________________

*import문
사용하고자 하는 클래스 또는 인터페이스가 다른 패키지에 소속되어 있다면, import문으로 해당 패키지의 클래스 또는 인터페이스를 가져와 사용할 것임을 컴파일러에게 알려줘야 한다.
import문을 작성하는 방법은 다음과 같다.
import 상위패키지.하위패키지.클래스이름;
import 상위패키지.하위패키지.*;

import문은 패키지 선언과 클래스 선언 사이에 작성한다.
만약 사용하고자 하는 클래스들이 동일한 패키지 소속이라면 개별 import문을 작성하는 것보다는 *를 이용해서 해당 패키지에 소속된 클래스들을 사용할 것임을 알려주는 것도 좋은 방법이다.
import문은 개수에 제한이 없고 얼마든지 추가할 수 있다.

다음은 com.mycompany 패키지에 소속된 Car 클래스에서 com.hankook 패키지에 소속된 Tire 클래스를 사용하기 위해 imnport문을 작성한 것이다.
package com.mycompany;
import com.hankook.Tire;
[ 또는 import com.hankook.*; ]
public class Car{
    Tire tire = new Tire();
}

주의할 점은 상위 패키지를 import했다고 해서 하위 패키지까지 import되는 것은 아니라는 점이다.
자바는 패키지 전체 이름으로 패키지를 식별하기 때문에 com.hankook과 com.hankook.project를 서로 다른 패키지로 인식한다.
따라서 이 두 패키지에 소속된 클래스를 사용하려면 다음과 같이 2개의 import문이 필요하다.
import com.hankook.*;
import com.hankook.project.*;

경우에 따라서는 import문과 상관없이 패키지가 포함된 클래스 전체 이름을 코드에 기술해야 할 때가 있다.
서로 다른 패키지에 동일한 클래스 이름이 존재하고, 두 패키지가 모두 import되었다면, 컴파일러는 어떤 클래스를 사용해야 할지 모호해지므로 컴파일 에러를 발생시킨다.
이 경우에는 정확하게 패키지가 포함된 클래스 전체 이름을 기술해야 한다.
______________________________________________________________________________________________________________________________________________________________________________________

<접근 제한자>
접근 제한자(Access Modifier)는 말 그대로 접근을 제한하기 위해 사용된다.
여기서 접근이란 클래스 및 인터페이스 그리고 이들이 가지고 있는 멤버의 접근을 말한다.

어떤경우에는 클래스와 인터페이스를 다른 패키지에서 사용하지 못하도록 막을 필요가 있다.
그리고 객체 생성을 막기 위해 생성자를 호출하지 못하게 하거나 필드나 메소드를 사용하지 못하도록 막아야 되는 경우도 있는데, 이때 접근 제한자를 사용할 수 있다.
접근 제한자는 public, protected, private와 같이 세 가지 종류가 있다.

*public 접근 제한자 : 단어 뜻 그대로 외부 클래스가 자유롭게 사용할 수 있도록 한다.
*protected 접근 제한자 : 같은 패키지 또는 자식 클래스에서 사용할 수 있도록 한다.
*private 접근 제한자 : 단어 뜻 그대로 개인적인 것이라 외부에서 사용될 수 없도록 한다.

위 세가지 접근 제한자가 적용되지 않으면 default 접근 제한을 가진다.
*default 접근 제한 : 같은 패키지에 소속된 클래스에서만 사용할 수 있도록 한다.

<클래스의 접근 제한>
클래스를 선언할 때 해당 클래스를 같은 패키지 내에서만 사용할 것인지, 아니면 다른 패키지에서도 사용할 수 있도록 할 것인지 결정해야 한다.
클래스는 다음과 같이 public, default 접근 제한을 가진다.