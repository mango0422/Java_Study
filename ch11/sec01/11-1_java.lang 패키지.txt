java.lang 패키지는 자바 프로그램의 기본적인 클래스를 담고 있는 패키지이다.
그래서 java.lang 패키지이 있는 클래스와 인터페이스는 import 없이 사용할 수 있다.
지금까지 사용한 String과 System 클래스도 java.lang 패키지에 포함되어 있기 때문에 import 하지 않고 사용했다.
이번 절에서는 java.lang 패키지에 속하는 주요 클래스에 대해 살펴보자.

java.lang 패키지에 속하는 주요 클래스와 간략한 용도를 먼저 살펴보면 다음과 같다.

클래스 - 용도
Object - 자바 클래스의 최상위 클래스로 사용
System - 표준 입력 장치(키보드)로부터 데이터를 입력받을 때 사용
       - 표준 출력 장치(모니터)로 출력하기 위해 사용
       - 자바 가상 기계를 종료할 때 사용
       - 쓰레기 수집기를 실행 요청할 때 사용
Class - 클래스를 메모리로 로딩할 때 사용
String - 문자열을 저장하고 여러 가지 정보를 얻을 때 사용
Wrapper(Byte, Short, Character, Integer, Float, Double, Boolean, Long)
       - 기본 타입의 데이터를 갖는 객체를 만들 때 사용
       - 문자열을 기본 타입으로 변환할 때 사용
       - 입력값 검사에 사용
Main - 수학 함수를 이용할 때 사용

여기서는 위 표에 있는 클래스르 중심으로 살펴보려고 한다.
소개하는 클래스와 소속된 메소드들을 무작정 외우려고 하지 말고 API 도큐먼트에서 찾아보고, 어떤 기능을 제공하는지 내용을 읽고 이해하는 것이 더욱 중요하다.
자바에서 제공하는 API는 무척 방대하기 때문에 이 책에서 모두 다룰 수 없다.
API 도큐먼트를 잘 읽게 되면 책에서 다루지 않는 기능들도 알 수 있게 된다.
API 도큐먼트를 잘 활용하는 것도 개발 능력 중 하나이다.

<자바 API 도큐먼트>
지금까지 자바 언어에 대해 학습했다면 이제부터는 자바에서 제공하는 API(Application Programming Interface)를 배울 차례이다.
API는 라이브러리(library)라고 부르기도 하는데, 프로그램 개발에 자주 사용되는 클래스 및 인터페이스의 모음을 말한다.
우리가 사용해왔던 String 클래스와 System 클래스도 모두 API에 속하는 클래스이다.

방대한 자바 표준 API 중에서 우리가 원하는 API를 쉽게 찾아 이용할 수 있도록 도와주는 API 도큐먼트가 있다.
API 도큐먼트는 HTML 페이지로 작성되어 있고, 다음 URL을 방문하면 버전별로 볼 수 있다.
https://docs.oracle.com/en/java/javase/index.html

JDK8과 JDK11이후 버전 두 도큐먼트의 레이아웃은 다르다.
JDK8은 전체 자바 표준 API를 패키지별로 정리하여 보여주고 있지만, JDK11 이후 버전은 전체 자바 표준 API를 모듈별로 구분해서 정리하였기 때문에 첫 화면이 모듈 목록이다.
______________________________________________________________________________________________________________________________________________________________________________________

<API 도큐먼트에서 클래스 페이지 읽는 법>
API 도큐먼트에서 클래스를 설명하는 페이지 구조는 JDK 버전과 상관없이 대동소이하다.
Class String 페이지를 보면서 클래스 페이지를 읽는 방법을 설명해보겠다.
01. 최상단의 SUMMARY|NESTED|FIELD|CONSTR|METHOD를 본다.
    SUMMARY는 클래스 내에 선언된 멤버가 무엇이 있는지 알려준다.
    링크가 있으면 해당 멤버가 있다는 뜻이고 링크가 없으면 해당 멤버가 없다는 뜻이다.
    String 클래스는 NESTED에 링크가 없으므로 중첩클래스나 중첩 인터페이스가 없다는 뜻이다.
    반면에 FIELD, CONSTR, METHOD는 모두 링크가 있으므로 public 또는 protected로 선언된 필드, 생성자, 메소드는 있다는 뜻이다.



02. (!) 클래스의 선언부를 보자.
       Module java.base
       Package java.lang
       Class String
       java.lang.Object // 2
            java.lang.String // 2
       All Implemented Interfaces:
       Serializable, CharSequence, Comparable<String>

       public final class String  // 1
       extends Object // 1
       implements Serializable, Comparable<String>, CharSequence // 1
    클래스가 final 또는 abstract 키워드가 있는지 확인한다.
    String 클래스는 final 키워드가 있으므로 부모 클래스로는 사용할 수 없다.

    그리고 extends 뒤에 언급된 부모 클래스가 무엇인지 본다.
    String 클래스는 Object를 상속받고 있다.
    상속 관계에 있는 모든 클래스를 보려면 (2)의 상속 계층도를 보면 된다.

    마지막으로 implements 키워드 뒤에 언급된 인터페이스가 무엇인지 보자.
    String 클래스는 Serializable, Comparable<String>, CharSequence와 같이 3개의 인터페이스를 구현하고 있다.

03. 클래스에 선언된 필드 목록을 보자.
    1번에서 설명한 SUMMARY : NESTED | FIELD | CONSTR | METHOD에서 FIELD 링크를 클릭하면 필드 목록으로 이동한다.
    String 클래스에서 선언된 필드 목록은 다음과 같다.
    
    Modifier and Type              Field                       Description
    static Comparator<String>      CASE_INSENSITIVE_ORDER      A Comparator thar orders String objects as by compareToIgnoreCase.
    
    Modifier and Type 컬럼에는 static 또는 protected 여부와 타입이 표시된다.
    Field와 Description 컬럼에는 필드 이름이 굵은 글씨로 표시되어 있고, 아래에는 필드에 대한 간단한 설명이 있다.
    필드 이름을 클릭하면 상세 설명 페이지로 이동한다.

04. 클래스에 선언된 생성자 목록을 보자.
    SUMMARY : NESTED | FIELD | CONSTR | METHOD에서 CONSTR 링크를 클릭하면 생성자 목록으로 이동한다.
    String 클래스에서 선언된 생성자 목록은 다음과 같다.

    Constructor      Description
    String()         Initializes a newly created String object so that it represents an empty character sequence.
    
    String 클래스에는 매개 변수의 타입 또는 개수를 달리해서 10개가 넘는 생성자들이 오버로딩되어 있다.
    모두 new 연산자로 호출해서 String 객체를 생성할 수 있다.
    굵게 표시된 것이 생성자 이름이고, 옆에 간단한 설명이 있다.
    생성자 이름을 클릭하면 상세 설명 페이지로 이동한다.

05. 클래스에 선언된 메소드 목록을 보자.
    SUMMARY : NESTED | FIELD | CONSTR | METHOD에서 METHOD 링크를 클릭하면 메소드 목록으로 이동한다.
    String 클래스에서 선언된 메소드 목록은 다음과 같다.
    
    Modifier and Type       METHOD               Description
    char                    charAt(int index)    Returns the char value at the specified index.
    IntStream               chars()              Returns a stream of int zero-extending the char values from this sequence.

    [All Methods] 탭은 전체 메소드 목록을 보여주고, [Static Methods] 탭은 정적 메소드 목록을 보여준다.
    그리고 [Instance Methods] 탭은 인스턴스 메소드 목록을 보여준다.
    Modifier and Type 컬럼에는 static 또는 protected 여부와 리턴 타입이 표시된다.
    static이 없다면 Description 컬럼에는 메소드 이름과 매개 변수가 굵은 글씨로 표시되어 있고, 옆에는 메소드에 대한 간단한 설명이 있다.
    메소드 이름을 클릭하면 상세 설명 페이지로 이동한다.
______________________________________________________________________________________________________________________________________________________________________________________

<Object 클래스>
클래스 선언시 extends 키워드로 다른 클래스를 상속하지 않으면 암시적으로 java.lang.Object 클래스를 상속하게 된다.
따라서 자바의 모든 클래스는 Object 클래스의 자식이거나 자손 클래스이다.
Object는 자바의 최상위 부모 클래스에 해당한다.

 API 도큐먼트에서 Object 클래스를 한번 찾아보자.
 
 Module java.base
 Pacakge java.lang
 Class Object
 java.lang.Object
 public class Object

SUMMARY를 보면 Object 클래스는 필드가 없고, 생성자와 메소드로 구성되어 있다.
모든 클래스의 최상위 부모가 Object이므로 모든 클래스에서 Object의 메소드를 사용할 수 있다.

* 객체비교(equal())
다음은 Object 클래스의 equals() 메소드이다.

public boolean equals(Object obj) { ... }
equals() 메소드의 매개 타입은 Object인데, 이것은 모든 객체가 매개값으로 대입될 수 있음을 말한다.
왜냐하면 모든 객체는 Object 타입으로 자동 타입 변환 될 수 있기 때문이다.
Object 클래스의 equals() 메소드는 비교 연산자인 ==과 동일한 결과를 리턴한다.
두 객체가 동일한 객체라면 true를 리턴하고 그렇지 않으면 false를 리턴한다.

Object obj1 = new Object();
Object obj2 = new Object();

boolean result = obj1.equals(obj2);

boolean result = (obj1 == obj2);

자바에서는 두 객체를 동등 비교할 때 equals() 메소드를 흔히 사용한다.
equals() 메소드는 두 객체를 비교해서 논리적으로 동등하면 true를 리턴하고, 그렇지 않으면 false를 리턴한다.
논리적으로 동등하다는 것은 같은 객체이건 다른 객체이건 상관없이 객체가 저장하고 있는 데이터가 동일함을 뜻한다.

예를 들어 String 객체의 equals() 메소드는 String 객체의 번지를 비교하는 것이 아니고, 문자열이 동일한지 조사해서 같다면 true를 리턴하고, 그렇지 않다면 false를 리턴한다.
이것이 가능한 이유는 String 클래스가 Object의 equals() 메소드를 재정의(오버라이딩)해서 번지 비교가 아닌 문자열 비교로 변경했기 때문이다.
일반적으로 Object의 equals() 메소드는 직접 사용되지 않고 하위 클래스에서 재정의하여 논리적으로 동등 비교할 때 이용된다.

equals() 메소드를 재정의할 때에는 매개값(비교 객체)이 기준 객체와 동일한 타입의 객체인지 먼저 확인해야 한다.
Object 타입의 매개 변수는 모든 객체가 매개값으로 제공될 수 있기 때문에 instanceof 연산자로 기준 객체와 동일한 타입인지 제일 먼저 확인해야 한다.
만약 비교 객체가 다른 타입이라면 equals() 메소드는 false를 리턴해야 한다.
비교 객체가 동일한 타입이라면 기준 객체 타입으로 강제 타입 변환해서 필드값이 동일한지 검사하면 된다.
필드값이 모두 동일하다면 true를 리턴하고 그렇지 않으면 false를 리턴하도록 했다.

다음 예제는 Member 클래스에서 equals() 메소드를 재정의한 것이다.
Member 타입이면서 id필드값이 같을 경우는 true를 리턴하고, 그 이외의 경우는 false를 리턴하도록 했다.
( Member.java / MemberExample.java / package sec01.exam01; )

* 객체 해시코드(hashCode())
객체 해시코드란 객체를 식별하는 하나의 정수값을 말한다.
Object 클래스의 hashCode() 메소드는 객체의 메모리 번지를 이용해서 해시코드를 만들어 리턴하기 때문에 객체마다 다른 값을 가지고 있다.
논리적 동등 비교 시 hashCode()를 오버라이딩할 필요가 있는데, 13장에서 배울 컬렉션 프레임워크에서 HashSet, HashMap, Hastable은 다음과 같은 방법으로 두 객체가 동등한지 비교한다.

우선 hashcode() 메소드를 실행해서 리턴된 해시코드 값이 같은지를 보자.
해시코드 값이 다르면 다른 객체로 판단하고, 해시코드 값이 같으면 equals() 메소드로 다시 비교한다.
그렇기 때문에 hashCode() 메소드가 true가 나와도 equals()의 리턴값이 다르면 다른 객체가 된다.

hashCode() 리턴값 --(같음)--> equals() 리턴값 --(true)--> 동등객체
   |                                ↓ false
   └----------------------------> 다른 객체

다음 예제를 보면 Key 클래스는 equals() 메소드를 재정의해서 number 필드값이 같으면 true를 리턴하도록 했다.
그러나 hashCode() 메소드는 재정의하지 않았기 때문에 Object의 hashCode 메소드가 사용된다.
( Key.java / package ch11.sec01.exam02; )
이런 경우 HashMap의 식별키로 Key 객체를 사용하면 저장된 값을 찾아오지 못한다.
왜냐하면 number 필드값이 같더라도 hashCode() 메소드에서 리턴하는 해시코드가 다르므로 다른 식별키로 인식하기 때문이다.

다음 예제에서 new Key(1) 객체로 "홍길동"을 저장하고, 다시 new Key(1) 객체로 저장된 "홍길동"을 읽으려고 했지만 결과는 null이 나온다.
( KeyExample.java / package ch11.sec01.exam02; )
의도한 대로 "홍길동"을 읽으려면 다음과 같이 재정의한 hashCode() 메소드를 Key 클래스에 추가하면 된다.
hashCode()의 리턴값을 number 필드값으로 했기 때문에 저장할 때의 new Key(1)과 읽을 때의 new Key(1)로 같은 해시코드가 리턴된다.

( Key.java / package ch11.sec01.exam02; 21~24번째 줄 추가 )
저장할 때의 new Key(1)과 읽을 때의 new Key(1)은 사실 서로 다른 객체이지만 HashMap은 hashCode()의 리턴값이 같고, equals()의 리턴값이 true가 되기 때문에 동등한 객체로 평가한다.
즉, 같은 식별키로 인식한다는 뜻이다.
결론적으로 말해서 객체의 동등 비교를 위해서는 Object의 equals() 메소드만 재정의하지 말고 hashCode() 메소드도 재정의해서 논리적으로 동등한 객체일 경우 동일한 해시코드가 리턴되도록 해야 한다.

다음은 이전 에제에서 사용한 Member 클래스를 보완하기 위해 hashCode() 메소드를 재정의한 것이다.
id 필드값이 같을 경우 해시코드를 리턴하도록 하기 위해 String의 hashCode() 메소드의 리턴값을 활용했다.
String의 hashCode()는 같은 문자열일 경우 동일한 해시코드를 리턴한다.
( Member.java / package ch11.sec01.exam03; )

* 객체 문자 정보(toString())
Object 클래스의 toString() 메소드는 객체의 문자 정보를 리턴한다.
객체의 문자 정보란 객체를 문자열로 표현한 값을 말한다.
기본적으로 Object 클래스의 toString() 메소드는 '클래스이름@16진수해시코드'로 구성된 문자 정보를 리턴한다.

Object obj = new Object();
System.out.println(obj.toString());

실행 결과 : java.lang.Object@de6ced

Object의 toString() 메소드의 리턴값은 자바 애플리케이션에서는 별 값어치가 없는 정보이므로 Object 하위 클래스는 toString() 메소드를 재정의(오버라이딩)하여 간결하고 유익한 정보를 리턴하도록 되어 있다.
예를 들어 java.util 패키지의 Date 클래스는 toString() 메소드를 재정의하여 현재 시스템의 날짜와 시간 정보를 리턴한다.
그리고 String 클래스는 toString() 메소드를 재정의해서 저장하고 있는 문자열을 리턴한다.

다음 예제는 Object 클래스와 Date 클래스의 toString() 메소드의 리턴값을 출력해본 것이다.
( ToStringExample.java / package ch11.sec01.exam04; )

우리가 만드는 클래스도 toString() 메소드를 재정의해서 좀 더 유용한 정보를 리턴하도록 할 수 있다.
다음 에제의 SmartPhone 클래스에서 toString() 메소드를 오버라이딩하여 제작회사와 운영체제를 리턴하도록 했다.
( SmartPhone.java / package ch11.sec01.exam05; )

우리는 지금까지 콘솔에 출력하기 위해 System.out.println() 메소드를 사용해왔다.
이 메소드의 매개값은 콘솔에 출력할 내용인데, 매개값이 기본 타입(byte, short, int, long, float, double, boolean)일 경우, 해당 값을 그대로 출력한다.
만약 매개값으로 객체를 주면 객체의 toString() 메소드를 호출해서 리턴값을 받아 출력하도록 되어 있다.
______________________________________________________________________________________________________________________________________________________________________________________

<System 클래스>
자바 프로그램은 운영체제에서 바로 실행되는 것이 아니라 JVM 위에서 실행된다.
따라서 운영체제의 모든 기능을 직접 이용하기는 어렵다.
하지만 java.lang 패키지에 속하는 System 클래스를 이용하면 운영체제의 일부 기능을 이용할 수 있다.
즉, 프로그램 종료, 키보드로부터 입력, 모니터로 출력, 현재 시간 읽기 등이 가능하다.
System 클래스의 모든 필드와 메소드는 정적 필드와 정적 메소드로 구성되어 있다.

 * 프로그램 종료(exit())
 경우에 따라서는 강제적으로 JVM을 종료시킬 때도 있다.
 이때 System 클래스의 exit() 메소드를 호출하면 된다.
 exit() 메소드는 현재 실행하고 있는 프로세스를 강제 종료시키는 역할을 한다.
 exit() 메소드는 int 매개값을 지정하도록 되어 있는데, 이 값을 종료 상태값이라고 한다.
 일반적으로 정상 종료일 경우 0 값을 준다.

 System.exit(0);

 다음 예제는 fot문이 10번 반복하다가 i가 5가 되면 System.exit(0)가 실행되어 프로그램(JVM)을 종료한다.
 ( ExitExample.java / package ch11.sec01.exam06; )

 System.exit(0)은 프로그램을 강제 종료하므로 7라인에서 실행하면 11라인은 출력되지 않는다.
 만약 프로그램이 종료될 때 꼭 11라인을 실행해야 한다면 System.exit(0) 대신에 for문을 빠져나오는 break문을 사용하는 것이 좋다.
 7라인과 8라인을 번갈아가며 주석 처리하고 실행해보기 바란다.

 * 현재 시각 읽기(currentTimeMillis(), nanoTime())
 System 클래스의 currentTimeMillis() 메소드와 nanoTime 메소드는 컴퓨터의 시계로부터 현재 시간을 읽어서 밀리세컨드(1/1000초) 단위와 나노세컨드(1/10^9초) 단위의 long 값을 리턴한다.

 long time = Sysetm.currentTimeMillis();
 long time = System.nanoTime();
 
 리턴값은 주로 프로그램으 실행 소요 시간 측정에 사용된다.
 프로그램 시작 시 시각을 읽고, 프로그램이 끝날 때 시각을 읽어서 차이를 구하면 프로그램 실행 소요 시간이 나온다.

 다음 예제는 for문을 사용해서 1부터 1000000까지의 합을 구하는 데 걸린 시간을 출력했다.
( SystemTimeExample.java / package ch11.sec01.exam07; )
______________________________________________________________________________________________________________________________________________________________________________________

<Class 클래스>
자바는 클래스와 인터페이스의 메타 데이터를 java.lang 패키지에 소속된 Class 클래스로 관리한다.
여기서 메타 데이터란 클래스의 이름, 생성자 정보, 필드 정보, 메소드 정보를 말한다.

 * Class 객체 얻기(getClass(), forName())
 프로그램에서 Class 객체를 얻기 위해서는 다음 세 가지 방법 중 하나를 이용하면 된다.
 
  @ 클래스로부터 얻는 방법
   1. Class clazz = 클래스이름.class
   2. Class clazz = Class.forName("패키지...클래스이름")
  @ 객체로부터 얻는 방법
   3. Class clazz = 참조변수.getClass();
첫 번째와 두 번째 방법은 객체 없이 클래스 이름만 가지고 Class 객체를 얻는 방법이다.
세 번째 방법은 클래스로부터 객체가 이미 생성되어 있을 경우에 사용하는 방법이다.
예를 들어 String 클래스의 Class 객체는 다음과 같이 얻을 수 있다.
 1. Class clazz = String.class
 2. Class clazz = Class.forName("java.lang.String");
    String str = "감자바";
 3. Class clazz = str.getClass();

 다음은 세 가지 방법으로 Car 클래스의 Class 객체를 얻고, Class의 메소드를 이용해 클래스의 전체 이름과 간단한 이름 그리고 패키지 이름을 얻어 출력한다.
 ( ClassExample.java / package ch11.sec01.exam08; )
 
 * 클래스 경로를 활용해서 리소스 절대 경로 얻기
 Class 객체는 해당 클래스의 파일 경로 정보를 가지고 있기 때문에 이 경로를 활용해서 다른 리소스파일(이미지, XML, Property 파일)의 경로를 얻을 수 있다.
 이 방법은 UI 프로그램에서 많이 활용된다.
 예를 들어 다음과 같이 Car 클래스가 위치하는 경로에 photo.jpg 파일이 있다고 가정해보자.
 
 C:\SelfStudyJava\chap11\bin\sec01
                            | - exam09
                                | - Car.class
                                | - photo1.jpg
                                | - images
                                    | - photo2.jpg
 프로그램 실행 중에 이미지 파일(photo1.jpg, photo2.jpg)의 절대 경로가 필요할 경우에 Car.class를 기준으로 한 상대 경로를 이용해서 절대 경로를 얻을 수 있다.
 String photo1Path = clazz.getResource("photo1.jpg").getPath();
 String photo2Path = clazz.getResource("images/photo2.jpg").getPath();
 ( ResourcePathExample.java / package ch11.sec01.exam09; )
______________________________________________________________________________________________________________________________________________________________________________________

<String 클래스>
어떤 프로그램이건 문자열은 데이터로서 아주 많이 사용된다.
그렇기 때문에 문자열을 생헝하는 방법과 추출, 비교, 찾기, 분리, 변환 등을 제공하는 메소드를 잘 익혀두어야 한다.

 * String 생성자
 자바의 문자열은 java.lang 패키지의 String 클래스의 인스턴스로 관리된다.
 소스상에서 문자열 리터럴은 String 객체로 자동 생성되지만, String 클래스의 다양한 생성자를 이용해서 직접 String 객체를 생성할 수도 있다.
 어떤 생성자를 이용해서 String 객체를 생성할지는 제공되는 매개값의 타입에 달려 있다.

 다음은 사용 빈도수가 높은 생성자들이다.
 파일의 내용을 읽거나, 네트워크를 통해 받은 데이터는 보통 byte[] 배열이므로 이것을 문자열로 변환하기 위해 사용된다.
 
 //배열 전체를 String 객체로 생성
 String str = new String(byte[] bytes);
 //지정한 문자셋으로 디코딩
 String str = new String(byte[] bytes, String charsetName);

 //배열의 offset 인덱스 위치부터 length만큼 String 객체로 생성
 String str = new String(byte[] bytes, int offset, int length);
 //지정한 문자셋으로 디코딩
 String str = new String(byte[] bytes, int offset, int length, String charsetName)

 다음은 바이트 배열을 문자열로 변환하는 예제이다.
 ( ByteToStringExample.java / package ch11.sec01.exam10; )

 다음 예제는 키보드로부터 읽은 바이트 배열을 문자열로 변환하는 방법을 보여준다.
 System.in.read() 메소드는 키보드에서 입력한 내용을 매개값으로 주어진 바이트 배열에 저장하고 읽은 바이트 수를 리턴한다.
 예를 들어 Hello를 입력하고 Enter키를 눌렀다면 Hello + 캐리지리턴(\r)+라인피드(\n)의 코드값이 바이트 배열에 저장되고 총 7개의 바이트를 읽었기 때문에 7을 리턴한다.
    입력내용      : H   e    l    l    o  \r  \n
 바이트 배열 내용 : 72  101  108  108  111 13  10

 다음 예제는 10라인에서 String(byte[] bytes, int offset, int length) 형태로 바이트 배열을 문자열로 변환하였는데, length 매개값으로 배열 길이에서 2를 빼준 이유는 캐리지리턴(\r)+라인피드(\n)부분은 문자열로 만들 필요가 없기 때문이다.
 ( KeyboardToStringExample.java / package ch11.sec01.exam11; )

 * String 메소드
 String 클래스는 문자열의 추출, 비교, 찾기, 분리, 변환 등과 같은 다양한 메소드를 가지고 있다.
 그중에서 사용 빈도수가 높은 메소드를 다음과 같이 정리해보았다.

 리턴타입   메소드 이름(매개변수)             설명
 char       charAt(int index)               특정 위치의 문자를 리턴합니다.
 boolean    equals(Object anObject)         두 문자열을 비교한다.
 byte[]     getBytes()                      byte[]로 리턴한다.
 byte[]     getBytes(Charset charset)       주어진 문자셋으로 인코딩한 byte[]로 리턴한다.
 int        indexOf(String str)             문자열 내에서 주어진 문자열의 위치를 리턴한다.
 int        length()                        총 문자의 수를 리턴한다.
 String     replace(CharSequence target,    target 부분을 replacement로 대치한 새로운 문자열을 리턴한다.
            CharSequence replacement)
 String     substring(int beginIndex)       beginIndex 위치에서 끝까지 잘라낸 새로운 문자열을 리턴한다.
 String     substring(int beginIndex,       beginIndex 위치에서 endIndex 전까지 잘라낸 새로운 문자열을 리턴한다.
                int endIndex)
 String     toLowerCase()                   알파벳 소문자로 변환한 새로운 문자열을 리턴한다.
 String     toUpperCase()                   알파벳 대문자로 변환한 새로운 문자열을 리턴한다.
 String     trim()                          앞뒤 공백을 제거한 새로운 문자열을 리턴한다.
 String     valueOf(int i)                  기본 타입 값을 문자열로 리턴한다.
            valueOf(double d)

@ 문자 추출(charAt())
charAt() 메소드는 매개값으로 주어진 인덱스의 문자를 리턴한다.
여기서 인덱스란 0에서부터 '문자열 길이-1' 까지의 번호를 말한다.
다음 코드를 보면서 이해해보자.

String subject = "자바 프로그래밍";
char charValue = subject.charAt(3);

"자바 프로그래밍" 문자열은 다음과 같이 인덱스를 매길 수 있다.
 자 | 바 |  | 프 | 로 | 그 | 래 | 밍
  0 | 1 | 2 | 3 |  4 | 5  | 6  | 7
charAt(3)은 3번 인덱스 위치에 있는 문자를 말한다. 즉 '프' 문자가 해당된다.

다음 예제는 주민등록번호에서 7번 인덱스 문자를 읽어 남자와 여자를 구별한다.
( StringCharAtExample.java / package ch11.sec01.exam12; )

@ 문자열 비교(equals())
기본 타입(byte, char, short, int, long, float, double, boolean) 변수의 값을 비교할 때에는 == 연산자를 사용한다.
그러나 문자열을 비교할 때에는 == 연산자를 사용하면 원하지 않는 결과가 나올 수 있다.
다음 코드를 보면서 이해해보자.

String strVar1 = new String("신민철");
String strVar2 = "신민철";
String strVar3 = "신민철";

자바는 문자열 리터럴이 동일하다면 동일한 String 객체를 참조하도록 되어 있다.
그래서 strVar2와 strVar3은 동일한 String 객체를 참조한다.
그러나 StrVar1은 new 연산자로 생성된 다른 String 객체를 참조한다.

이 경우 변수 strVar1과 strVar의 == 연산은 false를 산출하고 strVar2와 strVar3의 == 연산은 true를 산출한다.
== 연산자는 각 변수에 저장된 번지를 비교하기 때문에 이러한 결과가 나온다.

strVar1 == strVar3; // false
strVar2 == strVar3; // true

만약 두 String 객체의 문자열만을 비교하고 싶다면 == 연산자 대신에 equals() 메소드를 사용해야 한다.

strVar1.equals(strVar2); // true
strVar2.equals(strVar3); // true

원래 equals()는 Object  클래스의 번지 비교 메소드이지만, String 클래스가 재정의해서 문자열을 비교하도록 변경했다.

( StringEqualsExample.java / package ch11.sec01.exam13; )

@ 바이트 배열로 변환(getBytes())
종종 문자열을 바이트 배열로 변환하는 경우가 있다.
대표적인 예로 네트워크 문자열을 전송하거나, 문자열을 암호화할 때 문자열을 바이트 배열로 변환하는 경우가 있다.
문자열을 바이트 배열로 변환하는 메소드는 다음 두 가지가 있다.

byte[] bytes = "문자열".getBytes();
byte[] bytes = "문자열".getBytes(CharSet charset);

getBytes() 메소드는 시스템의 기본 문자셋으로 인코딩된 바이트 배열을 리턴한다.
만약 특정 문자셋으로 인코딩된 바이트 배열을 얻으려면 두 번째 메소드를 사용하면 된다.
다음은 EUC-KR과 UTF-8로 각각 인코딩된 바이트 배열을 리턴한다.

try{
    byte[] bytes1 = "문자열".getBytes("EUC-KR");
    byte[] bytes2 = "문자열".getBytes("UTF-8");
} catch (UnsupportedEncodingException e){
}

어떤 문자셋으로 인코딩하느냐에 따라 바이트 배열의 크기가 달라지는데, EUC-KR은 getBytes()와 마찬가지로 알파벳은 1바이트, 한글은 2바이트로 변환하고, UTF-8은 알파벳은 1바이트, 한글은 3바이트로 변환한다.
getBytes(Charset charset) 메소드는 잘못된 문자셋을 매개값으로 줄 경우, java.io.UnsupportedEncodingException이 발생하므로 예외 처리가 필요하다.
 바이트 배열은 다시 문자열로 변환(디코딩)할 때에는 어떤 문자세으로 인코딩된 바이트 배열이냐에 따라서 디코딩 방법이 다르다.
단순하게 String(byte[] bytes) 생성자를 이용해서 디코딩하면 시스템의 기본 문자셋을 이용한다.
시스템 기본 문자셋과 다른 문자셋으로 인코딩된 바이트 배열일 경우 다음 String 생성자를 이용해서 디코딩해야 한다.

String str = new String(bytes, String charsetName);

다음 예제에서는 문자열을 바이트 배열로 인코딩하고 길이를 출력해보았다.
그리고 다시 String 생성자를 이용해서 문자열로 디코딩해보았다.
( StringGetBytesExample.java / package ch11.sec01.exam14; )