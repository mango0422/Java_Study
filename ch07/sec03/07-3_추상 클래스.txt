객체를 직접 생성할 수 잇는 클래스를 실체 클래스라고 한다면 이 클래스들의 공통적인 특성을 추출해서 선언한 클래스를 추상 클래스라고 한다.
추상 클래스와 실체 클래스는 상속의 관계를 가지고 있다.
추상 클래스가 부모, 실체 클래스가 자식으로 구현되어 실체 클래스는 추상 클래스의 모든 특성을 물려받고, 추가적인 특성을 가질 수 있다.

여기서 특성이란 필드와 메소드들을 말한다.
예를 들어 Bird.class, Insert.class, Fish.class 등의 실체 클래스에서 공통되는 필드와 메소드를 따로 선언한 Animal.class 클래스를 만들 수 있는데, 이것이 바로 추상 클래스이다.

<추상 클래스의 용도>
실체 클래스의 공통적인 특성(필드, 메소드)을 뽑아내어 추상 클래스로 만드는 이유는 다음 두 가지이다.

1. 공통된 필드와 메소드의 이름을 통일할 목적
 실체 클래스를 설계하는 사람이 여러 사람일 경우, 실체 클래스마다 필드와 메소드가 제각기 다른 이름을 가질 수 있다.
  예를 들어 소유자의 이름을 저장하는 필드를 Telephone 클래스에서는 owner라고 하고, SmartPhone 클래스에서는 user라고 할 수 있다.
 그리고 전원을 켜는 메소드를 Telephone에서는 turnOn()으로 설계하고, SmartPhone에서는 powerOn()이라고 설계할 수 있다.
  이렇게 데이터와 기능이 모두 동일함에도 불구하고 이름이 다르다 보니, 객체마다 사용 방법이 달라진다.
 이 방법보다는 Phone이라는 추상 클래스에 소유자인 owner 필드와 turnOn() 메소드를 선언하고, Telephone과 SmartPhone은 Phone을 상속함으로써 필드와 메소드 이름을 통일할 수 있다.

2. 실체 클래스를 작성할 때 시간 절약
 공통적인 필드와 메소드는 추상 클래스인 Phone에 모두 선언해두고, 다른 점만 실체 클래스에 선언하면 실체 클래스를 작성하는 데 시간을 절약할 수 있다.
  예를 들어, Telephone과 SmartPhone은 Phone을 상속받기 때문에 owner 필드와 turnOn() 메소드를 선언할 필요가 없다.
 Telephone과 SmartPhone의 추가적인 특성인 autoAnswering()과 internetSearch() 메소드만 각각 선언하면 된다.
  일반적으로 개발 프로젝트에서 설계자와 코더(코드를 작성하는 사람)는 다른 일을 수행한다.
 설계자는 코더에게 클래스는 어떤 구조로 작성해야 한다는 것을 알려주어야 한다.
 이를 단순히 문서로 전달한다면, 코더가 실수로 필드와 메소드 이름을 다르게 코딩할 수 있다.
 코더가 작성해야 할 클래스가 다수이고 이 클래스들이 동일한 필드와 메소드를 가져야 할 경우, 설계자는 이 내용들을 추려내어 추상 클래스로 설계 규격을 만드는 것이 좋다.
 그리고 코더에게 추상 클래스를 상속해서 구체적인 클래스를 만들도록 요청하면 된다.
  예를 들어, 자동차를 설계할 때에는 일반적인 타이어 규격에 맞추어서 작성해야 한다.
 즉, 특정한 타이어만 사용할 수 있도록 자동차를 설계하지는 않는다는 것이다.
 이는 일반적인 타이어 규격을 준수하는 타이어는 어떠한 것이든 부착할 수 있도록 하기 위해서이다.
  여기서 타이어 규격은 타이어의 추상 클래스라고 볼 수 있고, 타이어 규격을 준수하는 한국 타이어나 금호 타이어는 추상 클래스를 상속하는 타이어의 실체 클래스라고 볼 수 있다.
______________________________________________________________________________________________________________________________________________________________________________________ 

<추상 클래스 선언>
추상 클래스를 선언할 때에는 클래스 선언에 abstract 키워드를 붙여야 한다.
abstract를 붙이면 new 연산자를 이용해서 객체를 만들지 못하고, 상속을 통해 자식 클래스만 만들 수 있다.

public abstract class 클래스{
    //필드
    //생성자
    //메소드
}

추상 클래스도 일반 클래스와 마찬가지로 필드, 생성자, 메소드 선언을 할 수 있다.
new 연산자로 직접 생성자를 호출할 수는 없지만 자식 객체가 생성될 때 super(...)를 호출해서 추상 클래스 객체를 생성하므로 추상 클래스도 생성자가 반드시 있어야 한다.
______________________________________________________________________________________________________________________________________________________________________________________ 

<추상 메소드와 재정의>
추상 클래스는 실체 클래스가 공통적으로 가져야 할 필드와 메소드들을 정의해놓은 추상적인 클래스로, 실체 클래스의 멤버(필드, 메소드)를 통일하는데 목적이 있다.
모든 실체들이 가지고 있는 메소드의 실행 내용이 동일하다면 추상 클래스에서 메소드를 작성하는 것이 좋을 것이다.
 하지만 메소드의 선언만 통일하고, 실행 내용은 실체 클래스마다 달라야 하는 경우가 있다.
예를 들어, 모든 동물은 소리를 내기 때문에 Animal 추상 클래스에서 sound()라는 메소드를 정의했다고 가정해보자.
그렇다면 어떤 소리를 내도록 해야 하는데, 이것은 실체 클래스에서 직접 작성해야 될 부분이다.
왜냐하면 동물은 다양한 소리를 내므로 이것을 추상 클래스에서 통일적으로 작성할 수 없기 때문이다.
그렇다고 해서 sound() 메소드를 실체 클래스에서 작성하도록 하면 sound() 메소드를 잊어버리고 작성하지 않을 경우 동물은 소리를 낸다는 것에 위배된다.
 이런 경우를 위해 추상 클래스는 추상 메소드를 선언할 수 있다.
추상 메소드는 abstract 키워드와 함께 메소드의 선언부가 있고 메소드 실행내용은 중괄호 {}가 없는 메소드를 말한다.
다음은 추상 메소드를 선언하는 방법을 보여준다.
[public | protected] abstract 리턴타입 메소드이름(매개변수, ...);
추상 클래스 설계 시 하위 클래스가 반드시 실행 내용을 채우도록 강제하고 싶은 메소드가 있을 경우 해당 메소드를 추상 메소드로 선언한다.
자식 클래스는 반드시 추상 메소드를 재정의해서 실행 내용을 작성해야 하는데, 그렇지 않으면 컴파일 에러가 발생한다.
이것이 추상 메소드의 위력이다.
 다음은 Animal 클래스를 추상 클래스로 선언하고 sound() 메소드를 추상 메소드로 선언한 것이다.
어떤 소리를 내는지는 결정할 수 없지만 동물은 소리를 낸다는 공통적인 특징을 규정하기 위해 sound() 메소드를 추상 메소드로 선언했다.
 public abstract class Animal{
     public abstract void sound();
 }
 Animal 클래스를 상속하는 하위 클래스는 동물마다 고유한 소리를 내도록 sound() 메소드를 재정의해야 한다.
예를 들어 Dog는 "멍멍", Cat은 "야옹" 소리를 내도록 Dog와 Cat 클래스에서 sound() 메소드를 재정의해야 한다. 
______________________________________________________________________________________________________________________________________________________________________________________ 

확인문제
1-1. 추상 클래스는 직접 new 연산자로 객체를 생성할 수 없다. (O)
1-2. 추상 클래스는 부모 클래스로만 사용된다. (O)
1-3. 추상 클래스는 실체 클래스들의 공통된 특성(필드, 메소드)으로 구성된 클래스이다. (O)
1-4. 추상 클래스에는 최소한 하나의 추상 메소드가 있어야 한다. (X)

2-1. 추상 메소드는 선언부만 있고, 실행 블록을 가지지 않는다. (O)
2-2. 추상 메소드는 자식 클래스에서 재정의해서 실행 내용을 결정해야 한다. (O)
2-3. 추상 메소드를 재정의하지 않으면 자식 클래스도 추상 클래스가 되어야 한다. (O)
2-4. 추상 메소드가 있더라도 해당 클래스가 꼭 추상 클래스가 될 필요는 없다. (X)

3.
public abstract class HttpServlet{
    public abstract void service();
}

public class HttpServletExample{
    public static void main(String[] args){
        method(new LoginServlet()); //로그인합니다.
        method(new FileDownloadServlet()); //파일 다운로드합니다.
    }

    public static void method(HttpServlet servlet){
        servlet.service();
    }
}

