다형성(多形性)은 사용 방법은 동일하지만 다양한 객체를 이용해서 다양한 실행결과가 나오도록 하는 성질이다.
예를 들어 자동차가 타이어를 사용하는 방법은 동일하지만 어떤 타이어를 사용(장착)하느냐에 따라 주행 성능이 달라질 수 있다.
다형성을 구현하려면 메소드 재정의와 타입 변환이 필요하다.

<자동 타입 변환>
타입 변환이란 타입을 다른 타입으로 변환하는 행위를 말한다. (기본 타입의 변환에 대해서는 이미 ch02에서 학습한 바 있다.)
클래스도 마찬가지로 타입 변환이 있는데, 클래스의 변환은 상속 관계에 있는 클래스 사이에서 발생한다.
자식은 부모 타입으로 자동 타입 변환이 가능하다.

자동 타입 변환(promotion)은 프로그램 실행 도중에 자동적으로 타입 변환이 일어나는 것을 말한다.
자동 타입 변환은 다음과 같은 조건에서 일어난다.

자동 타입 변환의 개념은 자식은 부모의 특징과 기능을 상속받기 때문에 부모와 동일하게 취급될 수 있다는 것이다.
예를 들어, 고양이가 동물의 특징과 기능을 상속받았다면 '고양이는 동물이다.'가 성립한다.

Animal과 Cat 클래스가 (class Cat extends Animal{...}) <-- 와 같이 상속 관계에 있다고 가정해보자.
Cat 클래스로부터 Cat 객체를 생성하고 이것을 Animal 변수에 대입하면 자동 타입 변환이 일어난다.
Cat cat = new Cat(); Animal animal = cat;
______________________________________________________________________________________________________________________________________________________________________________________

<필드의 다형성>
자동 타입 변환이 필요한 이유는.. 다형성을 구현하기 위해서이다.
필드의 타입을 부모 타입으로 선언하면 다양한 자식 객체들이 저장될 수 있기 때문에 필드 사용 결과가 달라질 수 있다.
 -> 이것이 필드의 다형성이다.

프로그램은 수많은 객체들이 서로 연결되고 각자의 역할을 하게 되는데, 이 객체들은 다른 객체로 교체될 수 있어야 한다.

Tire 클래스
 - 최대 회전수
 - 누적 회전수
 - 타이어의 위치
*roll() 메소드는 타이어를 1회전시키는 메소드.
 - 1번 실행할 때마다 누적 회전수를 1씩 증가시킨다.
 - if(누적 회전수 < 최대 회전수), 누적회전수+=1;
 - if(누적 회전수 ==  최대 회전수), System.out.println("타이어 펑크");
 - roll() 메소드의 리턴 타입은 boolean. 정상회전 : return true; 펑크 : return false;
 ______________________________________________________________________________________________________________________________________________________________________________________

 <매개 변수의 다형성>
 자동 타입 변환은 필드의 값을 대입할 때에도 발생하지만, 주로 메소드를 호출할 때 많이 발생한다.
 메소드를 호출할 때에는 매개 변수의 타입과 동일한 매개값을 지정하는 것이 정석이지만, 매개값을 다양화하기 위해 매개 변수에 자식 객체를 지정할 수도 있다.

 예를 들어, 다음과 같이 Driver 클래스에는 drive() 메소드가 정의되어 있는데 vehicle 타입의 매개 변수가 선언되어 있다.
 class Driver {
    void drive(Vehicle vehicle){
        vehicle.run();
    }
 }
 
 drive() 메소드를 정상적으로 호출한다면 다음과 같을 것이다.
 Driver driver = new Driver();
 Vehicle vehicle = new Vehicle();
 driver.drive(vehicle);

 만약 Vehicle의 자식 클래스인 Bus 객체를 drive() 메소드의 매개값으로 넘겨준다면 어떻게 될까
 
 drive() 메소드는 Vehicle 타입을 매개 변수로 선언했지만, Vehicle을 상속받는 Bus 객체가 매개값으로 사용되면 자동 타입 변환이 발생한다.

 Vehicle vehicle = bus; // bus를 vehicle로 자동 타입 변환
 ______________________________________________________________________________________________________________________________________________________________________________________ 

<강제 타입 변환>
강제 타입 변환은 부모 타입을 자식 타입으로 변환하는 것을 말한다.
그렇다고 해서 모든 부모 타입을 자식 타입으로 강제 변환할 수 있는 것은 아니다.
자식 타입이 부모 타입으로 자동 타입 변환한 후 다시 자식 타입으로 변환할 때 강제 타입 변환을 사용할 수 있다.

예를 들어 다음 코드와 같이 Child 객체가 Parent 타입으로 자동 변환된 상태에서 원래 Child로 강제 변환할 수 있습니다.
Parent parent = new Child();    // 자동 타입 변환
Child child = (Child) Parent;   // 강제 타입 변환

자식 타입이 부모 타입으로 자동 타입 변환하면, 부모에 선언된 필드와 메소드만 사용 가능하다는 제약 사항이 따른다.
만약 자식에 선언된 필드와 메소드를 꼭 사요앻야 한다면 강제 타입 변환을 해서 다시 자식 타입으로 변환한 다음 자식의 필드와 메소드를 사용하면 된다.
