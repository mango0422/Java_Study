상속은 이미 잘 개발된 클래스를 재사용해서 새로운 클래스를 만들기 때문에 중복되는 코드를 줄여준다.
예를 들어 field1, field2, method1(), method2()를 가지는 클래스를 작성한다고 가정해보자.
field1과 method1()을 가지고 있는 클래스가 있다면, 4개를 모두 처음부터 작성하는 것보다는 클래스를 상속하고, field2와 method2()만 추가 작성하는 것이 보다 효율적이고 개발 시간을 절약해준다.
상속을 이용하면 부모 클래스의 수정으로 모든 자식 클래스들도 수정되는 효과를 가져오기 때문에 유지 보수 시간을 최소화할 수도 있다.

<클래스 상속>
현실에서 상속은 부모가 자식을 선택해서 물려주지만, 프로그램에서는 자식이 부모를 선택한다.
자식 클래스를 선언할 때 어떤 부모 클래스를 상속받을 것인지 결정하고, 선택된 부모 클래스는 다음과 같이 extends 뒤에 기술한다.
class 자식 클래스 extends 부모클래스{
    // 필드
    // 생성자
    // 메소드
}

예를 들어, Car 클래스를 상속해서 SportsCar 클래스를 설계하려면 다음과 같이 작성하면 된다.
class SportsCar extends Car{}

자바에서 상속은 다음과 같은 특징을 가지고 있다.
1. 여러 개의 부모 클래스를 상속할 수 없다. 그러므로 다음과 같이 extends 뒤에는 단 하나의 부모 클래스만 와야 한다.
class 자식클래스 extends 부모클래스1 {} // 자바는 다중 상속을 허용하지 않아 여러 개의 부모 클래스를 상속할 수 없다.
2. 부모 클래스에서 private 접근 제한을 갖는 필드와 메소드는 상속 대상에서 제외된다.
그리고 부모 클래스와 자식 클래스가 다른 패키지에 존재한다면 default 접근 제한을 갖는 필드와 메소드도 상속 대상에서 제외된다.

<부모 생성자 호출>
현실에서 부모 없는 자식이 있을 수 없듯이 자바에서도 자식 객체를 생성하면, 부모 객체가 먼저 생성되고 그다음에 자식 객체가 생성된다.
다음 코드는 DmbCellPhone 객체만 생성하는 것처럼 보이지만, 사실은 내부적으로 부모인 CellPhone 객체가 먼저 생성되고 자식인 DmbCellPhone 객체가 생성된다.
DmbCellPhone dmbCellPhone